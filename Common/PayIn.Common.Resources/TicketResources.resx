<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Address" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="Amount" xml:space="preserve">
    <value>Amount</value>
  </data>
  <data name="AmountIncomeTax" xml:space="preserve">
    <value>Amount Income Tax</value>
  </data>
  <data name="AmountLimitException" xml:space="preserve">
    <value>It's forbiden to transfer more than 9.999.999.999</value>
  </data>
  <data name="AmountTaxable" xml:space="preserve">
    <value>Amount Taxable</value>
  </data>
  <data name="AmountVat" xml:space="preserve">
    <value>Amount Vat</value>
  </data>
  <data name="AmountWithoutCommission" xml:space="preserve">
    <value>Amount Without Commission</value>
  </data>
  <data name="Article" xml:space="preserve">
    <value>Article</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Cancelled" xml:space="preserve">
    <value>Cancelled</value>
  </data>
  <data name="Capture" xml:space="preserve">
    <value>Capture</value>
  </data>
  <data name="CardNumber" xml:space="preserve">
    <value>Card Number</value>
  </data>
  <data name="CardType" xml:space="preserve">
    <value>Card Type</value>
  </data>
  <data name="Charge" xml:space="preserve">
    <value>Charge</value>
  </data>
  <data name="ChargedAmount" xml:space="preserve">
    <value>Charged amount</value>
  </data>
  <data name="ChargeDetails" xml:space="preserve">
    <value>Ticket Details</value>
  </data>
  <data name="Charges" xml:space="preserve">
    <value>Charges</value>
  </data>
  <data name="Chart" xml:space="preserve">
    <value>Statistics</value>
  </data>
  <data name="CheckPin" xml:space="preserve">
    <value>Check PIN</value>
  </data>
  <data name="CheckPinText" xml:space="preserve">
    <value>If you are sure to pay the amount of {0} € to {1}, you only have to enter your pin for payment. ¿Are you sure?</value>
  </data>
  <data name="Cif" xml:space="preserve">
    <value>CIF</value>
  </data>
  <data name="City" xml:space="preserve">
    <value>City</value>
  </data>
  <data name="Commerce" xml:space="preserve">
    <value>Commerce</value>
  </data>
  <data name="Create" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="CreateOra" xml:space="preserve">
    <value>Parking meter</value>
  </data>
  <data name="CreateTicket" xml:space="preserve">
    <value>Create tickets</value>
  </data>
  <data name="Currency" xml:space="preserve">
    <value>Currency</value>
  </data>
  <data name="Date" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Deadline" xml:space="preserve">
    <value>Deadline</value>
  </data>
  <data name="DeadlineAprox" xml:space="preserve">
    <value>Approximate deadline: {0}</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DeleteQuestion" xml:space="preserve">
    <value>Do you want to delete {0} of {1}€?</value>
    <comment>0 -&gt; title, 1 -&gt; amount</comment>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Details" xml:space="preserve">
    <value>Details</value>
  </data>
  <data name="DetailsReference" xml:space="preserve">
    <value>Reference</value>
  </data>
  <data name="Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="Hour" xml:space="preserve">
    <value>Hour</value>
  </data>
  <data name="Id" xml:space="preserve">
    <value>Id</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NoData" xml:space="preserve">
    <value>No details available for this date.</value>
  </data>
  <data name="NotPaid" xml:space="preserve">
    <value>Not paid</value>
  </data>
  <data name="NumberPlate" xml:space="preserve">
    <value>Number plate</value>
  </data>
  <data name="Ora" xml:space="preserve">
    <value>Parking meter</value>
  </data>
  <data name="Paid" xml:space="preserve">
    <value>Paid</value>
  </data>
  <data name="Pay" xml:space="preserve">
    <value>Pay</value>
  </data>
  <data name="Payin" xml:space="preserve">
    <value>Pay[in]</value>
  </data>
  <data name="PayinCommission" xml:space="preserve">
    <value>Pay[In] </value>
  </data>
  <data name="PaymentDetails" xml:space="preserve">
    <value>Payment Details</value>
  </data>
  <data name="PaymentId" xml:space="preserve">
    <value>Payment Id</value>
  </data>
  <data name="PaymentMedia" xml:space="preserve">
    <value>Payment Media</value>
  </data>
  <data name="Payments" xml:space="preserve">
    <value>Payments</value>
  </data>
  <data name="Pin" xml:space="preserve">
    <value>PIN Pay[in]</value>
  </data>
  <data name="PinException" xml:space="preserve">
    <value>PagoNoAutorizado. Pin incorrecto</value>
  </data>
  <data name="Price" xml:space="preserve">
    <value>Price</value>
  </data>
  <data name="PriceCharged" xml:space="preserve">
    <value>Price charged</value>
  </data>
  <data name="Prices" xml:space="preserve">
    <value>Prices</value>
  </data>
  <data name="QrGenerate" xml:space="preserve">
    <value>Gen. QR</value>
  </data>
  <data name="Quantity" xml:space="preserve">
    <value>Quantity</value>
  </data>
  <data name="Reference" xml:space="preserve">
    <value>Reference</value>
  </data>
  <data name="RefundAmount" xml:space="preserve">
    <value>Refunded amount</value>
  </data>
  <data name="Renew" xml:space="preserve">
    <value>Renew</value>
  </data>
  <data name="RetrieveAll" xml:space="preserve">
    <value>Tickets</value>
  </data>
  <data name="Returns" xml:space="preserve">
    <value>Returns</value>
  </data>
  <data name="Several" xml:space="preserve">
    <value>Several</value>
  </data>
  <data name="State" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="SupplierName" xml:space="preserve">
    <value>Supplier Name</value>
  </data>
  <data name="TaxName" xml:space="preserve">
    <value>Tax Name</value>
  </data>
  <data name="Ticket" xml:space="preserve">
    <value>Ticket</value>
  </data>
  <data name="TicketAlreadyPaid" xml:space="preserve">
    <value>Ticket already paid</value>
  </data>
  <data name="TicketAmount" xml:space="preserve">
    <value>Ticket amount</value>
  </data>
  <data name="TicketId" xml:space="preserve">
    <value>Ticket Id</value>
  </data>
  <data name="TicketReference" xml:space="preserve">
    <value>Ticket Reference</value>
  </data>
  <data name="TimeTable" xml:space="preserve">
    <value>Time tables</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="Total" xml:space="preserve">
    <value>Total</value>
  </data>
  <data name="TotalCharged" xml:space="preserve">
    <value>Total charged amount</value>
  </data>
  <data name="TotalRefunded" xml:space="preserve">
    <value>Total refund amount</value>
  </data>
  <data name="TotalTicket" xml:space="preserve">
    <value>Total ticket amount</value>
  </data>
  <data name="Until" xml:space="preserve">
    <value>Until</value>
  </data>
  <data name="Update" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="UserLogin" xml:space="preserve">
    <value>Login</value>
  </data>
  <data name="UserName" xml:space="preserve">
    <value>User</value>
  </data>
  <data name="VAT" xml:space="preserve">
    <value>VAT</value>
  </data>
  <data name="VatIncluding" xml:space="preserve">
    <value>VAT included</value>
  </data>
  <data name="CreateNonActiveConcessionException" xml:space="preserve">
    <value>You can't create tickets in non-active concession</value>
  </data>
  <data name="PayNonActiveConcessionException" xml:space="preserve">
    <value>You can't pay tickets in non-active concession</value>
  </data>
  <data name="UpdateNonActiveConcessionException" xml:space="preserve">
    <value>You can't update tickets in non-active concession</value>
  </data>
  <data name="AmountMoreThanZeroException" xml:space="preserve">
    <value>You can't create tickets with 0 or negative amount</value>
  </data>
  <data name="WorkerDoesntExists" xml:space="preserve">
    <value>The worker creating the ticket doesn't exist</value>
  </data>
  <data name="Attended" xml:space="preserve">
    <value>Attended by :</value>
  </data>
  <data name="ActiveException" xml:space="preserve">
    <value>The ticket is not active .</value>
  </data>
  <data name="TicketActive" xml:space="preserve">
    <value>Your ticket with the amount {0} from {1} is already active. You can pay it until {2} (UTC).</value>
    <comment>0 -&gt; ticketamount, 1 -&gt; ConcessionName , 2-&gt; ticketuntil</comment>
  </data>
  <data name="TicketActiveToday" xml:space="preserve">
    <value>Your ticket with the amount {0} from {1} will be active today at {2} (UTC). You can pay it until {3} (UTC). </value>
    <comment>0 -&gt; ticketamount, 1 -&gt; ConcessionName, 2 -&gt; ticketsincehour , 3 -&gt; ticketuntil</comment>
  </data>
  <data name="TicketNotFound" xml:space="preserve">
    <value>Ticket not found</value>
  </data>
  <data name="TextShortUrl" xml:space="preserve">
    <value>ticket/text_{0}_{1}.txt</value>
  </data>
  <data name="TextUrl" xml:space="preserve">
    <value>https://payin.blob.core.windows.net/files/ticket/text_{0}_{1}.txt</value>
  </data>
  <data name="TextUrlTest" xml:space="preserve">
    <value>https://payintest.blob.core.windows.net/files/ticket/text_{0}_{1}.txt</value>
  </data>
  <data name="TicketLastDay" xml:space="preserve">
    <value>Your ticket with the amount {0} from {1} will expire tomorrow. You can pay it until tomorrow at {2}h (UTC).</value>
    <comment>0 -&gt; ticketamount, 1 -&gt; ConcessionName, 2 -&gt; ticketuntilhour</comment>
  </data>
  <data name="PayingWithPendingPaymentException" xml:space="preserve">
    <value>No se puede pagar un ticket con pagos pendientes.</value>
  </data>
  <data name="PromotionMoreTravel" xml:space="preserve">
    <value>PROMOTION - Free travels</value>
  </data>
  <data name="PromotionOther" xml:space="preserve">
    <value>PROMOTION</value>
  </data>
  <data name="RefundInsufficientBalance" xml:space="preserve">
    <value>No hay suficiente saldo en el monedero para hacer la devolución</value>
  </data>
  <data name="EntranceEmailBody" xml:space="preserve">
    <value>Entrance {0}</value>
  </data>
  <data name="EntranceEmailSubject" xml:space="preserve">
    <value>New Entrance</value>
  </data>
  <data name="ExcedMaxAmountToSpendException" xml:space="preserve">
    <value>Your ticket exced max amount for this event</value>
  </data>
</root>